# Program: 'infinity_job'
# CC_BACKEND_VERSION 0.2.5
# OPENQL_VERSION 0.8.1.dcl-2
# Note:    generated by OpenQL Central Controller backend
#
# synchronous start and latency compensation
                add             R63,1,R0                # R63 externally set by user, prevent 0 value which would wrap counter
                seq_bar         20                      # synchronization
syncLoop:       seq_out         0x00000000,1            # 20 ns delay
                loop            R0,@syncLoop            # 
mainLoop:                                               # 
### Kernel: 'default_1'
## Bundle 0: start_cycle=1, duration_in_cycles=10000:
 # READOUT: prepz(q0)
        
## Bundle 1: start_cycle=12, duration_in_cycles=10000:
 # READOUT: prepz(q4)
 # READOUT: prepz(q3)
 # READOUT: prepz(q2)
 # READOUT: prepz(q1)
        
## Bundle 2: start_cycle=10001, duration_in_cycles=1:
 # gate 'rx180 0'
  # slot=2, instrument='mw_0', group=0': signal='[rx180-mw_0:0-i,rx180-mw_0:0-q]'
  # slot=2, instrument='mw_0', group=0: codeword=1 (static override): groupDigOut=0x00000001
  # slot=2, instrument='mw_0': lastEndCycle=0, startCycle=10001, slotDurationInCycles=1
[2]             seq_out         0x00000000,10001        # cycle 0-10001: padding on 'mw_0'
[2]             seq_out         0x80000001,1            # cycle 10001-10002: code word/mask on 'mw_0'
        
## Bundle 3: start_cycle=10002, duration_in_cycles=1:
 # gate 'rx180 0'
  # slot=2, instrument='mw_0', group=0': signal='[rx180-mw_0:0-i,rx180-mw_0:0-q]'
  # slot=2, instrument='mw_0', group=0: codeword=1 (static override): groupDigOut=0x00000001
  # slot=2, instrument='mw_0': lastEndCycle=10002, startCycle=10002, slotDurationInCycles=1
[2]             seq_out         0x80000001,1            # cycle 10002-10003: code word/mask on 'mw_0'
        
## Bundle 4: start_cycle=10003, duration_in_cycles=1:
 # gate 'rx180 0'
  # slot=2, instrument='mw_0', group=0': signal='[rx180-mw_0:0-i,rx180-mw_0:0-q]'
  # slot=2, instrument='mw_0', group=0: codeword=1 (static override): groupDigOut=0x00000001
  # slot=2, instrument='mw_0': lastEndCycle=10003, startCycle=10003, slotDurationInCycles=1
[2]             seq_out         0x80000001,1            # cycle 10003-10004: code word/mask on 'mw_0'
        
## Bundle 5: start_cycle=10004, duration_in_cycles=1:
 # gate 'rx180 0'
  # slot=2, instrument='mw_0', group=0': signal='[rx180-mw_0:0-i,rx180-mw_0:0-q]'
  # slot=2, instrument='mw_0', group=0: codeword=1 (static override): groupDigOut=0x00000001
  # slot=2, instrument='mw_0': lastEndCycle=10004, startCycle=10004, slotDurationInCycles=1
[2]             seq_out         0x80000001,1            # cycle 10004-10005: code word/mask on 'mw_0'
        
## Bundle 6: start_cycle=10005, duration_in_cycles=1:
 # gate 'rx180 0'
  # slot=2, instrument='mw_0', group=0': signal='[rx180-mw_0:0-i,rx180-mw_0:0-q]'
  # slot=2, instrument='mw_0', group=0: codeword=1 (static override): groupDigOut=0x00000001
  # slot=2, instrument='mw_0': lastEndCycle=10005, startCycle=10005, slotDurationInCycles=1
[2]             seq_out         0x80000001,1            # cycle 10005-10006: code word/mask on 'mw_0'
        
## Bundle 7: start_cycle=10006, duration_in_cycles=1:
 # gate 'rx180 0'
  # slot=2, instrument='mw_0', group=0': signal='[rx180-mw_0:0-i,rx180-mw_0:0-q]'
  # slot=2, instrument='mw_0', group=0: codeword=1 (static override): groupDigOut=0x00000001
  # slot=2, instrument='mw_0': lastEndCycle=10006, startCycle=10006, slotDurationInCycles=1
[2]             seq_out         0x80000001,1            # cycle 10006-10007: code word/mask on 'mw_0'
        
## Bundle 8: start_cycle=10007, duration_in_cycles=1:
 # gate 'rx180 0'
  # slot=2, instrument='mw_0', group=0': signal='[rx180-mw_0:0-i,rx180-mw_0:0-q]'
  # slot=2, instrument='mw_0', group=0: codeword=1 (static override): groupDigOut=0x00000001
  # slot=2, instrument='mw_0': lastEndCycle=10007, startCycle=10007, slotDurationInCycles=1
[2]             seq_out         0x80000001,1            # cycle 10007-10008: code word/mask on 'mw_0'
        
## Bundle 9: start_cycle=10008, duration_in_cycles=1:
 # gate 'rx180 0'
  # slot=2, instrument='mw_0', group=0': signal='[rx180-mw_0:0-i,rx180-mw_0:0-q]'
  # slot=2, instrument='mw_0', group=0: codeword=1 (static override): groupDigOut=0x00000001
  # slot=2, instrument='mw_0': lastEndCycle=10008, startCycle=10008, slotDurationInCycles=1
[2]             seq_out         0x80000001,1            # cycle 10008-10009: code word/mask on 'mw_0'
        
## Bundle 10: start_cycle=10009, duration_in_cycles=1:
 # gate 'rx180 0'
  # slot=2, instrument='mw_0', group=0': signal='[rx180-mw_0:0-i,rx180-mw_0:0-q]'
  # slot=2, instrument='mw_0', group=0: codeword=1 (static override): groupDigOut=0x00000001
  # slot=2, instrument='mw_0': lastEndCycle=10009, startCycle=10009, slotDurationInCycles=1
[2]             seq_out         0x80000001,1            # cycle 10009-10010: code word/mask on 'mw_0'
        
## Bundle 11: start_cycle=10010, duration_in_cycles=1:
 # gate 'rx180 0'
  # slot=2, instrument='mw_0', group=0': signal='[rx180-mw_0:0-i,rx180-mw_0:0-q]'
  # slot=2, instrument='mw_0', group=0: codeword=1 (static override): groupDigOut=0x00000001
  # slot=2, instrument='mw_0': lastEndCycle=10010, startCycle=10010, slotDurationInCycles=1
[2]             seq_out         0x80000001,1            # cycle 10010-10011: code word/mask on 'mw_0'
        
## Bundle 12: start_cycle=10011, duration_in_cycles=1:
 # gate 'rx180 0'
  # slot=2, instrument='mw_0', group=0': signal='[rx180-mw_0:0-i,rx180-mw_0:0-q]'
  # slot=2, instrument='mw_0', group=0: codeword=1 (static override): groupDigOut=0x00000001
  # slot=2, instrument='mw_0': lastEndCycle=10011, startCycle=10011, slotDurationInCycles=1
[2]             seq_out         0x80000001,1            # cycle 10011-10012: code word/mask on 'mw_0'
        
## Bundle 13: start_cycle=10012, duration_in_cycles=100:
 # READOUT: measure(q4)
  # slot=0, instrument='ro_1', group=3': signal='[dummy]'
 # READOUT: measure(q3)
  # slot=0, instrument='ro_1', group=2': signal='[dummy]'
 # READOUT: measure(q2)
  # slot=0, instrument='ro_1', group=1': signal='[dummy]'
 # READOUT: measure(q1)
  # slot=1, instrument='ro_2', group=0': signal='[dummy]'
 # READOUT: measure(q0)
  # slot=0, instrument='ro_1', group=0': signal='[dummy]'
 # last bundle of kernel, will pad outputs to match durations
  # slot=0, instrument='ro_1': lastEndCycle=0, startCycle=10012, slotDurationInCycles=100
[0]             seq_out         0x00000000,10012        # cycle 0-10012: padding on 'ro_1'
[0]             seq_out         0x001f0000,100          # cycle 10012-10112: code word/mask on 'ro_1'
# digIn=30
  # slot=1, instrument='ro_2': lastEndCycle=0, startCycle=10012, slotDurationInCycles=100
[1]             seq_out         0x00000000,10012        # cycle 0-10012: padding on 'ro_2'
[1]             seq_out         0x00030000,100          # cycle 10012-10112: code word/mask on 'ro_2'
# digIn=2
[2]             seq_out         0x00000000,100          # cycle 10012-10112: padding on 'mw_0'
[3]             seq_out         0x00000000,10112        # cycle 0-10112: padding on 'mw_1'
[4]             seq_out         0x00000000,10112        # cycle 0-10112: padding on 'flux_0'
        
                jmp             @mainLoop               # loop indefinitely
